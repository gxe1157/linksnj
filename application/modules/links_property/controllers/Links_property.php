<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');class Links_property extends MY_Controller{// https://www.youtube.com/watch?v=qOjGSI5OdIo/* model name goes here */public $mdl_name = 'Mdl_links_property';public $main_controller = 'links_property';public $column_rules  = array(        array('field' => 'fullname', 'label' => 'Your Name',              'rules' => 'required'),        array('field' => 'phone', 'label' => 'Phone',              'rules' => 'required'),        array('field' => 'email', 'label' => 'Email',              'rules' => 'required|valid_email|max_length[100]'),        array('field' => 'message', 'label' => 'Message',              'rules' => 'required')        );public $column_rules_agent  = array(        array('field' => 'appmnt_date', 'label' => 'Appointment Date',              'rules' => 'required'),        array('field' => 'fullname', 'label' => 'Your Name',              'rules' => 'required'),        array('field' => 'phone', 'label' => 'Phone',              'rules' => 'required'),        array('field' => 'email', 'label' => 'Email',              'rules' => 'required|valid_email|max_length[100]'),        array('field' => 'message', 'label' => 'Message',              'rules' => 'required'),        array('field' => 'links_agent', 'label' => 'Working with a Link\'s agent?',              'rules' => 'required'),        array('field' => 'availability', 'label' => 'What is you availability',              'rules' => 'required'),        array('field' => 'select_agent', 'label' => 'Select an agent',              'rules' => 'required'));function __construct() {    parent::__construct();}function modal_post_ajax(){    $table_name =  $_POST['form_name'] == 'contact_form' ? 'contact_message' : 'appointment_request';    $email_subject =  $_POST['form_name'] == 'contact_form' ? 'a Contact Us Request' : 'an Appointment Request';    $this->form_validation->set_rules( $this->column_rules);    if($this->form_validation->run() == TRUE) {        /* get the variables */        $data = $this->input->post(null, TRUE);        unset($data['form_name']);         if( $table_name == 'appointment_request' ){            $data['appmnt_date'] = SQLformat_date( $data['appmnt_date'] );        }        //insert a new record            $data['create_date'] = time();         $new_update_id = $this->db->insert($table_name,$data);        $response['success'] = $new_update_id > 0 ? 1: 2; // Insert failed        $response['data'] = $data;        $response['errors_array'] = $new_update_id > 0 ? '': 'Record failed to be created. Check your mysql command and or dbf.';        $response['rediredt_url']= base_url()."links_property/contactus_confirmation";        //send email        $today      = convert_timestamp( time(), 'full');           $email_to   = "info@mailers.com";        $email_from = $data['email'];        $subject    = "You have received ".$email_subject.$add ;        $compose_message = "Time Stamp : ".$today;        $compose_message .= "<br/><br/>";                $compose_message .= "Message no: ".$new_update_id;        $compose_message .= "<br/><br/><br/>";        foreach ($data as $key => $value) {          $compose_message .= ucfirst($key).": ".$value." <br/>";        }        $compose_message .= " <br/> ~Site Admin";            $this->load->library('MY_Email_helpers');        $this->my_email_helpers->contact_form( $email_to, $email_from, $subject, $compose_message);    } else {        /*  $row as each individual field array  */        $errors_array = [];                foreach($this->column_rules as $row){            $field = $row['field'];                     // getting field name            $error = form_error($field);                // getting error for field name            if($error) $errors_array[$field] = $error;  // Add errrors to $errors_array           }        $validation_errors = implode( $errors_array);        $response['flash_message'] = $validation_errors;        $response['success'] = '0';                        $response['errors_array'] = $errors_array;            }    echo json_encode($response); }function contactus_confirmation() {quit('Confirmation page goes here.....');}function send_message(){	$data = $this->input->post(null, TRUE);	$data['create_date'] = time();  // process changes  $this->load->library('form_validation');  $this->form_validation->set_rules( $this->column_rules );    if($this->form_validation->run() == TRUE) {        $data = $this->input->post( null, TRUE);        $data['create_date'] = time();        unset($data['user_id']);        unset($data['error_mess']);                    //insert a new item        $update_id = $this->_insert($data, 'contact_message');        if($update_id == 0 )        	quit('send_message failed......');        //send email         $today = convert_timestamp( time(), 'full');            $subject = 'test contact_form message no: '.$update_id;         $message = 'test contact_form message no: '.$update_id;         // $this->send_mail( $data['email'], $subject, $data['message']);        // redirect('message_received', refresh);    } else {       // echo validation_errors();    }    $data['custom_jscript'] = [];	$data['page_url'] = $data['source'];    $data['view_module'] = 'partials';        $data['title'] = "Property Listing";	$this->load->module('templates');	$this->templates->public_main($data);}function property(){	$first_bit = trim($this->uri->segment(1) );	$second_bit = trim($this->uri->segment(2) );	$col = 'mlsId';    $query = $this->get_where_custom($col, $second_bit, $orderby)->result();    $data['mlsId'] = $query[0]->mlsId;    $data['address_full'] = $query[0]->address_full;    $data['address_state'] =$query[0]->address_state;    $data['address_city']=$query[0]->address_city;        $photos = $query[0]->photos;    $photos = explode('|', $photos);    $data['photo'] = $photos[0];    $data['custom_jscript'] = [];	$data['page_url'] = 'properties';    $data['view_module'] = 'partials';        $data['title'] = "Property Listing";	$this->load->module('templates');	$this->templates->public_main($data);}} // End class Controller	// $this->load->module('webpages');	// $query = $this->webpages->get_where_custom('page_url', $first_bit);	// $num_rows = $query->num_rows();	// if($num_rows > 0) {	// 	//we have found content... load page	// 	foreach($query->result() as $row ){	// 		$data['page_url'] = strtolower($row->page_url);	// 		$data['page_title'] = $row->page_title;	// 		$data['page_keywords'] = $row->page_keywords;	// 		$data['page_description'] = $row->page_description;	// 		$data['page_content'] = $row->page_content;	// 	}	// } else {	// 	echo "<h1>Page Not Found 2 ".$first_bit."</h1>"; 	// 	$data['page_url'] = '404_page';	// 	$this->load->module('site_settings');	// 	$data['page_content'] = $this->site_settings->_get_page_not_found_msg();	// }